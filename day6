-- ROLLUP
-- 그룹별 소계와 총계를 집계함
-- 표현식의 개수가 n 이면 n+1 레벨까지, 하위 레벨에서
-- 상위 레벨 순으로 데이터가 순으로 데이터가 집계됨

-- 작업별 마일리지의 합계와 전체 합계 출력
SELECT mem_job
     , SUM(mem_mileage) AS 마일리지합
FROM member
GROUP BY ROLLUP(mem_job);
--  카테고리, 서브카테고리 별 상품수
SELECT prod_category
     , prod_subcategory
     , COUNT(prod_id) AS 상품수
FROM products
GROUP BY ROLLUP(prod_category, prod_subcategory);

-- 행단위 집합 UNION, UNION ALL, MINUS, INTERSECT
-- 행 맞춰야함, ORDER BY 절은 맨 끝에만
SELECT goods, seq
FROM exp_goods_asia
WHERE country = '한국'
UNION  -- 중복제거
SELECT goods, seq
FROM exp_goods_asia
WHERE country = '일본';  -- 마지막 select 문에만 사용가능

SELECT goods, seq
FROM exp_goods_asia
WHERE country = '한국'
UNION ALL  -- 각 select 결과 합 / 내용상관없이 합치고 싶을때
SELECT goods, seq
FROM exp_goods_asia
WHERE country = '일본';

SELECT goods
FROM exp_goods_asia
WHERE country = '한국'
MINUS   -- 차집합
SELECT goods
FROM exp_goods_asia
WHERE country = '일본';

SELECT goods, seq
FROM exp_goods_asia
WHERE country = '한국'
INTERSECT  -- 교집합   동일한 데이터 찾을때(pk안걸어놧을경우 중복되어잇으니)
SELECT goods, seq
FROM exp_goods_asia
WHERE country = '일본';

SELECT goods
FROM exp_goods_asia
WHERE country = '한국'
INTERSECT  -- 교집합   
SELECT goods
FROM exp_goods_asia
WHERE country = '일본'
UNION
SELECT '내용'
FROM dual;
-- 집합 대상의 컬럼의 수와 타입이 일치하면 사용가능

SELECT gubun
     , sum(loan_jan_amt)
FROM kor_loan_status
GROUP BY gubun
UNION
SELECT '합계', SUM(loan_jan_amt)
FROM kor_loan_status;

/*
    정규 표현식 oracle 10g 부터 사용가능 REGEXP_ <- 로 시작하는 함수
    .(dot) or [] <-- 모든 문자 1글자를 의미함.
    ^시작 $끝 [^] <-- 대괄호 안의 ^ not을 의미함
    [n] n번반복, [n,] n이상 반복, [n,m] n 이상 m이하 반복
*/
-- REGEXP_LIKE : 정규식 패턴 검ㅁ색
SELECT mem_name, mem_comtel
FROM member
WHERE REGEXP_LIKE(mem_comtel, '^..-');

-- mem_mail 데이터 중 영문자 시작 3-5 자리 이메일 주소패턴 추출
SELECT mem_name, mem_mail
FROM member
WHERE REGEXP_LIKE(mem_mail, '^[a-zA-Z]{3,5}@');
--mem_addd2 주소에서 한글로 끝나는 패턴의 주소를 추출하시오
SELECT mem_name, mem_add2
FROM member
WHERE REGEXP_LIKE(mem_add2, '[가-힝]$');
-- 다음 패턴의 주소를 조회하시오
-- 한글 + 띄어쓰기 + 숫자 ex 아파트 5동
SELECT mem_name, mem_add2
FROM member
WHERE REGEXP_LIKE(mem_add2, '[가-힝][ ][0-9]');
-- 한글만 있는 주소 검색
SELECT mem_name, mem_add2
FROM member
WHERE REGEXP_LIKE(mem_add2, '^[가-힝]+$');
--WHERE REGEXP_LIKE(mem_add2, '^[가-힝]{1,}$');
--WHERE REGEXP_LIKE(mem_add2, '^[가-힝]*$');
-- 한글이 없는것
SELECT mem_name, mem_add2
FROM member
WHERE REGEXP_LIKE(mem_add2, '^[^가-힝]+$');

SELECT mem_name, mem_add2
FROM member
WHERE REGEXP_LIKE(mem_add2, '[가-힝]');
-- | : 또는, () : 그룹
-- J로 시작하여, 세번때 문자가 m or n 인 직원이름 조회
SELECT emp_name
FROM employees
WHERE REGEXP_LIKE(emp_name, '^J.(m|n)');
-- REGEXP_SUBSTR 정규표현식 패턴과 일치하는 문자열을 반환
-- 이메일 기준으로 앞 뒤 출력
SELECT mem_mail
     , REGEXP_SUBSTR(mem_mail, '[^@]+',1, 1) AS 아이디
     , REGEXP_SUBSTR(mem_mail, '[^@]+',1, 2) AS 도메인
FROM member;

SELECT REGEXP_SUBSTR('A-B-C', '[^-]+',1, 1) AS ex1
     , REGEXP_SUBSTR('A-B-C', '[^-]+',1, 2) AS ex2
     , REGEXP_SUBSTR('A-B-C', '[^-]+',1, 3) AS ex3
     , REGEXP_SUBSTR('A-B-C', '[^-]+',1, 4) AS ex4 
FROM dual;

-- mem_add1 에서 공백을 기준으로 첫번째 단어를 출력하시오
SELECT mem_add1
     , REGEXP_SUBSTR(mem_add1, '[^ ]+',1,1) AS 시도
     , REGEXP_SUBSTR(mem_add1, '[^ ]+',1,2) AS 군구
FROM member;
-- REGEXP_REPLACE 대상 문자열에서
-- 정규 표현식 패턴을 적용하여 다른 패턴으로 대체
SELECT REGEXP_REPLACE('Ellen Hidi Smith', '(.*) (.*) (.*)', '\3, \1 \2') AS re
FROM dual;

-- 대전의 주소들을 모두 '대전'으로 바꾸어서 츨력하시오 id:p001 제외
-- 대전광역시 -> 대전
-- 대전시 -> 대전
SELECT mem_id, mem_add1
     , REGEXP_REPLACE(mem_add1, '(.{1,5}) (.*)', '대전 \2') AS 주소
FROM member
WHERE mem_add1 LIKE '%대전%'
AND mem_id != 'p001';
-- 펄 표기법 \w =[a-zA-Z0-9], \d = [0-9\
-- 전화번호 뒷자리에서 동일한 번호가 반복되는 사원 조회
SELECT emp_name, phone_number
FROM employees
WHERE REGEXP_LIKE(phone_number, '(\d\d)\1$');
-- (\d\d)\1$ (숫자숫자) \1 첫번째 그룹 캡처 그룹을 다시 참조

-- ^\d*\.?\d(0,2)
-- 어떤 패턴일까요?  
-- 숫자를 소수점 2째짜리 까지만

CREATE TABLE 강의내역 (
     강의내역번호 NUMBER(3)
    ,교수번호 NUMBER(3)
    ,과목번호 NUMBER(3)
    ,강의실 VARCHAR2(10)
    ,교시  NUMBER(3)
    ,수강인원 NUMBER(5)
    ,년월 date
);

CREATE TABLE 과목 (
     과목번호 NUMBER(3)
    ,과목이름 VARCHAR2(50)
    ,학점 NUMBER(3)
);

CREATE TABLE 교수 (
     교수번호 NUMBER(3)
    ,교수이름 VARCHAR2(20)
    ,전공 VARCHAR2(50)
    ,학위 VARCHAR2(50)
    ,주소 VARCHAR2(100)
);

CREATE TABLE 수강내역 (
    수강내역번호 NUMBER(3)
    ,학번 NUMBER(10)
    ,과목번호 NUMBER(3)
    ,강의실 VARCHAR2(10)
    ,교시 NUMBER(3)
    ,취득학점 VARCHAR(10)
    ,년월 DATE 
);
CREATE TABLE 학생 (
     학번 NUMBER(10)
    ,이름 VARCHAR2(50)
    ,주소 VARCHAR2(100)
    ,전공 VARCHAR2(50)
    ,부전공 VARCHAR2(500)
    ,생년월일 DATE
    ,학기 NUMBER(3)
    ,평점 NUMBER
);

COMMIT;

ALTER TABLE 학생 ADD CONSTRAINT PK_학생_학번 PRIMARY KEY (학번);

ALTER TABLE 수강내역 ADD CONSTRAINT PK_수강내역_수강내역번호 PRIMARY KEY (수강내역번호);

ALTER TABLE 과목 ADD CONSTRAINT PK_과목_과목번호 PRIMARY KEY (과목번호);

ALTER TABLE 교수 ADD CONSTRAINT PK_교수_교수번호 PRIMARY KEY (교수번호);

ALTER TABLE 강의내역 ADD CONSTRAINT PK_강의내역_강의내역번호 PRIMARY KEY (강의내역번호);



ALTER TABLE 수강내역 
ADD CONSTRAINT FK_학생_학번 FOREIGN KEY (학번) 
REFERENCES 학생 (학번);

ALTER TABLE 수강내역 
ADD CONSTRAINT FK_과목_과목번호 FOREIGN KEY (과목번호) 
REFERENCES 과목 (과목번호);

ALTER TABLE 강의내역 
ADD CONSTRAINT FK_교수_교수번호 FOREIGN KEY (교수번호) 
REFERENCES 교수 (교수번호);


ALTER TABLE 강의내역 
ADD CONSTRAINT FK_과목_강의과목번호 FOREIGN KEY (과목번호) 
REFERENCES 과목 (과목번호);



