/*
    서브쿼리
    3. 인라인 뷰 (from절)
    select 문의 질의 결과를 마치 테이블처럼 사용
*/
-- 수강내역 건수가 많은 학생 5명을 출력하시오.
SELECT * 
FROM( SELECT 학생.학번, 학생.이름
           , COUNT(수강내역.수강내역번호) AS 수강내역건수
      FROM 학생, 수강내역
      WHERE 학생.학번 = 수강내역.학번(+)
      GROUP BY 학생.학번, 학생.이름
      ORDER BY 3 DESC
      )
WHERE ROWNUM <= 5;
-- order by 를 해야되는데 order by는 맨 마지막에 실행되니 인라인 뷰로 사용
-- 문법적으로 사용 해야될 때 가 있음 윗 부분은 정렬 후 나온 결과를 가지고 where를 해야되니 쓴것임

-- oracle 게시판 쿼리에서 많이 사용되는 SQL
SELECT *
FROM (  
        SELECT ROWNUM AS rnum
             , a.*  -- a의 전체를 의미함
        FROM (  SELECT mem_name
                    , mem_mail
                    , mem_add1
                FROM member
                ORDER BY 1
             ) a
      )
WHERE rnum BETWEEN 1 AND 10;
-- 정렬 후 ROWNUM을 rnum 만듬

SELECT ROWNUM AS rnum
     , a.*
FROM member a
WHERE ROWNUM <= 2;  -- 1 검색조건 가능
                    -- 2 불가능
                    -- 2 <= 가능  
SELECT ROWNUM AS rnum2
     , b.*
FROM ( SELECT ROWNUM AS rnum
             , a.*
       FROM member a 
       ORDER BY 3) b;
--WHERE rnum = 10;

-- 학생들중 평점이 높은 상위 5명만 출력하시오
SELECT *
FROM (SELECT 이름, 전공, 평점
      FROM 학생
      ORDER BY 3 DESC )
WHERE ROWNUM <= 5; 
/*
    ANSI(American National Standards Institute)
    ANSI표준은  데이터베이스 관리시스템에서 사용하는 SQL 표준
    INNER JOIN, LEFT OUTER JOIN, RIGHT OUTER JOIN, FULL OUTER JOIN
*/
-- INNER JOIN
SELECT a.employee_id
     , a.emp_name
     , a.job_id
     , b.department_name
FROM employees a
   , departments b
WHERE a.department_id = b.department_id;
-- ANSI INNER JOIN(프롬절에 조인문이 들어감.)
SELECT a.employee_id
     , a.emp_name
     , a.job_id
     , b.department_name
FROM employees a
INNER JOIN departments b
ON (a.department_id = b.department_id)        -- ANSI 조인에 검색조건이 있다면
WHERE a.hire_date >= TO_DATE('2003-01-01');   -- 조인구문 아래 들어감.
--using join 컬럼명이 같을때 사용가능
SELECT a.employee_id
     , a.emp_name
     , a.job_id
     , b.department_name
     , department_id  -- using 절에 사용한 컬럼 조회할떄는 테이블명 들어가면안됨
FROM employees a
INNER JOIN departments b
USING (department_id)        -- 컬럼명이 같을때 사용가능 but 테이블명이 들어가면 안됨
WHERE a.hire_date >= TO_DATE('2003-01-01');
-- 일반 outer join (+)
SELECT a.employee_id, a.emp_name
     , b.job_id
FROM employees a
   , job_history b
WHERE a.job_id = b.job_id(+)  -- 널값을 포함시킬 테이블 컬럼쪽에 (+)
AND a.department_id = b.department_id(+);   
-- LEFT OUTER JOIN
SELECT a.employee_id, a.emp_name
     , b.job_id
FROM employees a  -- outer 키워드 생략가능
LEFT OUTER JOIN job_history b   -- 오른쪽 테이블을 왼쪽에 붙이겠다.
ON (a.job_id = b.job_id
    AND a.department_id = b.department_id);
-- RIGHT OUTER JOIN ( 위의 결과와 같음 )
SELECT a.employee_id, a.emp_name
     , b.job_id
FROM job_history b
RIGHT JOIN employees a   -- 왼쪽 테이블을 오른쪽이 붙인다.
ON (a.job_id = b.job_id
    AND a.department_id = b.department_id);

-- 다음 쿼리를 ANSI 문법으로 변경하시오
SELECT  m.mem_id AS mem_id
      , m.mem_name AS mem_name
      , COUNT(DISTINCT c.cart_no) AS 카트사용횟수
      , COUNT(DISTINCT c.cart_prod) AS 구매상품품목수
      , NVL(SUM(c.cart_qty),0) AS 상품구매수량
FROM member m
LEFT OUTER JOIN cart c
ON ( m.mem_id = c.cart_member )
GROUP BY m.mem_id, m.mem_name
ORDER BY 5 DESC;
--FULL OUTER JOIN 일반쿼리문 조인(+)은 안됨, ANSI만 됨.
CREATE TABLE table_a (emp_id NUMBER);
CREATE TABLE table_b (emp_id NUMBER);
INSERT INTO table_a VALUES(10);
INSERT INTO table_a VALUES(20);
INSERT INTO table_a VALUES(40);
INSERT INTO table_b VALUES(10);
INSERT INTO table_b VALUES(20);
INSERT INTO table_b VALUES(30);
commit;
SELECT a.emp_id, b.emp_id
FROM table_a a
FULL OUTER JOIN table_b b
ON(a.emp_id = b.emp_id);

-- LEFT OUTER JOIN 2개 이상
SELECT a.이름, b.강의실, c.과목이름
FROM 학생 a
LEFT OUTER JOIN 수강내역 b
ON(a.학번 = b.학번)
LEFT OUTER JOIN 과목 c
ON(b.과목번호 = c.과목번호);
-- CROSS 조인
SELECT *
FROM 학생, 수강내역;  -- 9 * 17 행이 나옴
-- ANSI CROSS
SELECT *
FROM 학생
CROSS JOIN 수강내역;
-- 셀츠조인(Self-join) 동일한 테이블로
-- 20번 부서에서 같은 부서번호를 가진 사원중
-- a 사원번호가 b 사원번호보다 작은 건 조회
SELECT a.emp_name, a.employee_id
     , b.emp_name, b.employee_id
FROM employees a
   , employees b
WHERE a.employee_id < b.employee_id
AND   a.department_id = b.department_id
AND   a.department_id = 20;

-- 중첩쿼리 IN 동시에 2개 이상의 컬럼 값이 같은건 조회
SELECT employee_id, emp_name, job_id
FROM employees
WHERE (employee_id, job_id) IN ( SELECT employee_id, job_id
                                 FROM job_history);
-- 학생들의 '전공별' '평점'이 '가장높은' 학생의 정보를 출력하시오
-- 1. 전공별 평점이 가장 높은 값 찾기
-- 2. 전공과 가장높은 평점인 학생의 정보 조회하기
SELECT *
FROM 학생
WHERE (전공, 평점) IN (SELECT 전공, MAX(평점)
                      FROM 학생
                      GROUP BY 전공);
-- 2000년도 판매(금액)왕의 정보를 출력하시오.(sales, employees)
-- 판매관련 컬럼(amount_sold, quantity_sold, sales_date)
-- 스칼라서브쿼리와 인라인 뷰를 사용해보세요
SELECT a.employee_id AS 사원번호
     , (SELECT emp_name
        FROM employees
        WHERE employee_id = a.employee_id) AS 직원이름
     , TO_CHAR(판매금액, '999,999,999,99') AS 판매금액
     , 판매수량
FROM (
        SELECT employee_id
             , SUM(amount_sold) AS 판매금액
             , SUM(quantity_sold) AS 판매수량
        FROM sales
        WHERE TO_CHAR(sales_date, 'YYYY') = '2000'
        GROUP BY employee_id
        ORDER BY 2 DESC
     ) a
WHERE ROWNUM <=1;


