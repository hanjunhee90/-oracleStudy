CREATE TABLE ex2_1(
      col1 VARCHAR2(100)
    , col2 NUMBER
    , col3 DATE
);
-- INSERT 데이터 삽입
-- 방법1. 기본형태 컬럼명 작성
INSERT INTO ex2_1 (col1,col2, col3)
VALUES ('nick', 10, sysdate);
-- 문자열 타입은 '' 숫자는 그냥 숫자 하지만 문자열인데 숫자라면 가능
INSERT INTO ex2_1 (col1,col2, col3)
VALUES ('jack', '10', sysdate);
SELECT * FROM ex2_1;
-- 특정 컬럼에만 삽입할때는 무조건 컬럼명 써야함.
INSERT INTO ex2_1(col1)
VALUES ('judy');
-- 방법2. 테이블에 있는 전체 컬럼에 삽입할때는 안써도됨.
INSERT INTO ex2_1 VALUES('팽수', 10, sysdate);
-- 방법3. SELECT INSERT 조회 결과를 삽입
INSERT INTO ex2_1(col1)
SELECT emp_name
FROM employees;

-- UPDATE 데이터 수정
UPDATE ex2_1
SET col3 = sysdate;  -- set 에는 수정하고자하는 데이터
-- where 절이 없으면 테이블 전체 없데이트 됨.
UPDATE ex2_1
SET col2 = 30
  , col3 = sysdate       -- 수정 컬럼이 많이면 , <--
WHERE col1 = 'nick';
COMMIT;        -- 변경이력 반영
ROLLBACK;      -- 변경이력 취소

UPDATE tb_info
SET hobby = '수면'
WHERE info_no =17;
SELECT * FROM tb_info;

-- DEKETE 데이터 삭제
DELETE ex2_1;    -- 테이블 내용 전체 삭제
-- delete 도 update와 같이 검색조건 중요함
DELETE ex2_1
WHERE col1 = 'nick';  -- 해당 조건이 만족하는 행을 삭제.
-- 제약조건도 삭제 후 테이블 삭제
DROP TABLE dep CASCADE CONSTRAINTS; 

-- 산술 연산자 *+/-
-- 문자 연산자 (문자열 더하기)  id와 name 를 더해 emp_info에
SELECT employee_id || '-' || emp_name as emp_info
FROM employees;
-- 논리 연산자 : >,<,>=,<=,=,<>,!=,^=
SELECT * FROM employees WHERE salary = 2600;     -- 같다
SELECT * FROM employees WHERE salary <> 2600;    -- 같지 않다
SELECT * FROM employees WHERE salary != 2600;    -- 같지 않다
SELECT * FROM employees WHERE salary ^= 2600;    -- 같지 않다
SELECT * FROM employees WHERE salary > 2600;     -- 초과
SELECT * FROM employees WHERE salary < 2600;     -- 미만
SELECT * FROM employees WHERE salary <= 2600;    -- 이하
SELECT * FROM employees WHERE salary >= 2600;    -- 이상

-- 표현식 CASE WHEN 조건1 THEN 조건1이 true 일때
--            WHEN 조건2 THEN 조건2이 true 일때
--            ELSE 그 밖에
--       END
-- 5000이하 c등급, 5000 초과 15000 이하 B등급, 그 밖에는 A등급
SELECT employee_id, salary
    , CASE WHEN salary <= 5000 THEN 'c등급'
           WHEN salary > 5000 AND salary <= 15000 THEN 'b등급'
      ELSE 'a등급'
   END as grade
FROM employees;
-- customers 테이블에서
-- 고객의 이름과 출생년도 성별을 출력하시오 (성별의 표현은 F:여자, M:남자)
SELECT * FROM customers;

SELECT cust_name, cust_year_of_birth, cust_gender
     , CASE WHEN cust_gender = 'M' THEN '남자'
            WHEN cust_gender = 'F' THEN '여자'
   END as gender
FROM customers
ORDER BY cust_year_of_birth DESC, cust_name ASC;

SELECT cust_name, cust_year_of_birth, cust_gender
     , CASE WHEN cust_gender = 'M' THEN '남자'
            WHEN cust_gender = 'F' THEN '여자'
   END as gender
FROM customers
ORDER BY 2 DESC, 1 ASC;  
-- 1990년 출생이며 남자만 조회하시오
SELECT cust_name, cust_year_of_birth, cust_gender
     , CASE WHEN cust_gender = 'M' THEN '남자'
            WHEN cust_gender = 'F' THEN '여자'
   END as gender
FROM customers
WHERE cust_year_of_birth = 1990 AND cust_gender = 'M'
ORDER BY cust_name ASC;

-- 계정 생성  id: member  pw member
-- 권한 부여
-- 해당 계정에 접속하여 -> member_table(utf-8).sql 파일 실행(table & data)

ALTER SESSION SET "_ORACLE_SCRIPT"=TRUE;
CREATE USER test IDENTIFIED BY test;
GRANT CONNECT, RESOURCE TO test;
GRANT UNLIMITED TABLESPACE TO test;




